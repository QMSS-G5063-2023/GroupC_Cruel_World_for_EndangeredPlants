selected = "All"),
# Create plotly bar chart
plotlyOutput(outputId = "plot"))
server <- function(input, output) {
# Filter data based on the selected state
data_filtered <- reactive({
if (input$state == "All") {
easement_restoration %>%
group_by(RESTORATION_FY) %>%
summarise(count = sum(COUNT))}
else {easement_restoration %>%
filter(STATE == input$state) %>%
group_by(STATE, RESTORATION_FY) %>%
summarise(count = sum(COUNT))}})
# Render plotly bar chart
output$plot <- renderPlotly({
p <- plot_ly(data_filtered(), x = ~RESTORATION_FY, y = ~count, type = 'bar')
# Add title and axis labels
p <- layout(p, title = "Restoration Count by Year and State",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Count"))
# If a state is selected, add it to the title
if (input$state != "All") {
p <- layout(p, title = paste0("Restoration Count by Year - ", input$state))
}
p
})
observe({
invalidateLater(1000, session)
service()
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(maps)
library(tidyverse)
library(leaflet)
library(readr)
library(RColorBrewer)
library(stringr)
library(lubridate)
library(rgdal)
library(geosphere)
library(plotly)
library(highcharter)
library(DT)
library(reshape2)
library(leaflet.minicharts)
library(jsonlite)
library(shiny)
library(heatmaply)
library(gifski)
library(gganimate)
acres_program_acres <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/acres_program_acres.csv", header=TRUE, stringsAsFactors=FALSE)
acres_program_count <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/acres_program_count.csv", header=TRUE, stringsAsFactors=FALSE)
acres_state <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/acres_state.csv", header=TRUE, stringsAsFactors=FALSE)
usa_spdf <- readOGR(dsn= "/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/us-state-boundaries.geojson")
acres_program_acres
acres_state
usa_spdf
#Convert string to numeric
acres_program_acres$Year <- as.numeric(acres_program_acres$Year)
#Melting Data
acres_program_acres_1 <- melt(acres_program_acres, id.vars="Year")
#Plot
acres_program_acres_graph <- acres_program_acres_1 %>%
ggplot(aes(x = Year, y = value, col=variable)) +
geom_line(aes(color = variable))+
geom_point(aes(color = variable))+
ggtitle("Acres Reciving Conservation by Program and Year")+xlab("Fiscal Year")+ylab("Acres")+
theme(axis.title=element_text(size=7), axis.text.x = element_text(size=5, angle = 90), plot.title=element_text(size=15, face = "bold"))+
scale_x_continuous(breaks=seq(2005,2022,1))+
scale_y_continuous(labels=scales::comma)
ggplotly(acres_program_acres_graph)
#Merge data
combined <- usa_spdf@data %>%
left_join(acres_state, by = c(name = "Stname"))
usa_spdf@data <- combined
usa_spdf@data$Acres <- as.numeric(usa_spdf@data$Acres)
usa_spdf@data$Practice_Count <- as.numeric(usa_spdf@data$Practice_Count)
# Extract latitude and longitude values
lat <- as.numeric(sub('.*?"lat":\\s*([^,}]+).*', '\\1', usa_spdf$geo_point_2d))
lon <- as.numeric(sub('.*?"lon":\\s*([^,}]+).*', '\\1', usa_spdf$geo_point_2d))
# Add latitude and longitude columns to usa_spdf@data
usa_spdf@data$lon <- lon
usa_spdf@data$lat <- lat
usa_spdf@data
#Create color palette
pal1 <- colorNumeric(
palette = "YlOrRd",
domain = usa_spdf@data$Acres)
pal2 <- colorNumeric(
palette = "YlOrRd",
domain = usa_spdf@data$Practice_Count)
#Create map
acres_state <- leaflet(usa_spdf) %>%
setView(lng = -98.5795, lat = 39.8283, zoom = 4) %>%
addTiles() %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = ~pal1(Acres),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = paste("State: ", usa_spdf@data$name, "<br>",
"Total Acres Receiving Conservation: ", usa_spdf@data$Acres, " acres"),
group = "Total Acres Receiving Conservation") %>%
addCircleMarkers(data = usa_spdf@data, lng = ~lon, lat = ~lat,
radius = ~Practice_Count/50000,
color = ~pal2(Practice_Count), stroke = FALSE, fillOpacity = 0.5,
popup = paste("State: ", usa_spdf@data$name, "<br>",
"Total Practice Count: ", usa_spdf@data$Practice_Count, " counts"),
group = "Total Practice Count") %>%
addLayersControl(
baseGroups = c("OpenStreetMap"),
overlayGroups = c("Total Acres Receiving Conservation", "Total Practice Count"),
options = layersControlOptions(collapsed = FALSE)) %>%
addLegend("topright", pal = pal1, values = ~Acres,
title = "Total Acres Receiving Conservation", opacity = 1)%>%
addLegend("bottomright", pal = pal2, values = ~Practice_Count,
title = "Total Practice Count", opacity = 1)
acres_state
# get data
rca_report <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/gs_type.csv", header=TRUE, stringsAsFactors=FALSE)
#Convert string to numeric
rca_report$year <- as.numeric(rca_report$year)
#Plot
government_spending <- highchart() %>%
hc_chart(type = "column") %>%
hc_title(text = "NRCS Resources Conservation Act (RCA) Obligation by Type and Year") %>%
hc_plotOptions(column = list(stacking = "normal")) %>%
hc_xAxis(categories = rca_report$year) %>%
hc_yAxis(title = list(text = "Total Obligation (Billions of $)")) %>%
hc_add_series(name="Technical Assistance",
data = rca_report$Technical_Assistance,
stack = "obligation") %>%
hc_add_series(name="Financial Assistance",
data = rca_report$Financial_Assistance,
stack = "obligation") %>%
hc_add_series(name="Reimbursable",
data = rca_report$Reimbursable,
stack = "obligation") %>%
hc_tooltip(formatter = JS("function () {
var percentage = (this.y / this.point.stackTotal) * 100;
return '<b>' + this.x + '</b><br/>' +
this.series.name + ': ' + Highcharts.numberFormat(this.y, 1) + ' (' + percentage.toFixed(2) + '%)<br/>' +
'Total: ' + Highcharts.numberFormat(this.point.stackTotal, 1);
}"))
government_spending
#get data
easement_restoration <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/Restoration trend.csv", header=TRUE, stringsAsFactors=FALSE)
# Create a Shiny app
ui <- fluidPage(
# Select state(s)
selectInput(inputId = "state",
label = "Select state:",
choices = c("All", unique(easement_restoration$STATE)),
selected = "All"),
# Create plotly bar chart
plotlyOutput(outputId = "plot"))
server <- function(input, output) {
# Filter data based on the selected state
data_filtered <- reactive({
if (input$state == "All") {
easement_restoration %>%
group_by(RESTORATION_FY) %>%
summarise(count = sum(COUNT))}
else {easement_restoration %>%
filter(STATE == input$state) %>%
group_by(STATE, RESTORATION_FY) %>%
summarise(count = sum(COUNT))}})
# Render plotly bar chart
output$plot <- renderPlotly({
p <- plot_ly(data_filtered(), x = ~RESTORATION_FY, y = ~count, type = 'bar')
# Add title and axis labels
p <- layout(p, title = "Restoration Count by Year and State",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Count"))
# If a state is selected, add it to the title
if (input$state != "All") {
p <- layout(p, title = paste0("Restoration Count by Year - ", input$state))
}
p
})
}
shinyApp(ui, server)
#get data
easement_restoration <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/Restoration trend.csv", header=TRUE, stringsAsFactors=FALSE)
# Create a Shiny app
ui <- fluidPage(
# Select state(s)
selectInput(inputId = "state",
label = "Select state:",
choices = c("All", unique(easement_restoration$STATE)),
selected = "All"),
# Create plotly bar chart
plotlyOutput(outputId = "plot"))
server <- function(input, output) {
# Filter data based on the selected state
data_filtered <- reactive({
if (input$state == "All") {
easement_restoration %>%
group_by(RESTORATION_FY) %>%
summarise(count = sum(COUNT))}
else {easement_restoration %>%
filter(STATE == input$state) %>%
group_by(STATE, RESTORATION_FY) %>%
summarise(count = sum(COUNT))}})
# Render plotly bar chart
output$plot <- renderPlotly({
p <- plot_ly(data_filtered(), x = ~RESTORATION_FY, y = ~count, type = 'bar')
# Add title and axis labels
p <- layout(p, title = "Restoration Count by Year and State",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Count"))
# If a state is selected, add it to the title
if (input$state != "All") {
p <- layout(p, title = paste0("Restoration Count by Year - ", input$state))
}
p
})
}
#shinyApp(ui, server)
#get data
easement_restoration <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/Restoration trend.csv", header=TRUE, stringsAsFactors=FALSE)
# Create a Shiny app
ui <- fluidPage(
# Select state(s)
selectInput(inputId = "state",
label = "Select state:",
choices = c("All", unique(easement_restoration$STATE)),
selected = "All"),
# Create plotly bar chart
plotlyOutput(outputId = "plot"))
server <- function(input, output) {
# Filter data based on the selected state
data_filtered <- reactive({
if (input$state == "All") {
easement_restoration %>%
group_by(RESTORATION_FY) %>%
summarise(count = sum(COUNT))}
else {easement_restoration %>%
filter(STATE == input$state) %>%
group_by(STATE, RESTORATION_FY) %>%
summarise(count = sum(COUNT))}})
# Render plotly bar chart
output$plot <- renderPlotly({
p <- plot_ly(data_filtered(), x = ~RESTORATION_FY, y = ~count, type = 'bar')
# Add title and axis labels
p <- layout(p, title = "Restoration Count by Year and State",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Count"))
# If a state is selected, add it to the title
if (input$state != "All") {
p <- layout(p, title = paste0("Restoration Count by Year - ", input$state))
}
p
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(maps)
library(tidyverse)
library(leaflet)
library(readr)
library(RColorBrewer)
library(stringr)
library(lubridate)
library(rgdal)
library(geosphere)
library(plotly)
library(highcharter)
library(DT)
library(reshape2)
library(leaflet.minicharts)
library(jsonlite)
library(shiny)
library(heatmaply)
library(gifski)
library(gganimate)
acres_program_acres <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/acres_program_acres.csv", header=TRUE, stringsAsFactors=FALSE)
acres_program_count <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/acres_program_count.csv", header=TRUE, stringsAsFactors=FALSE)
acres_state <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/acres_state.csv", header=TRUE, stringsAsFactors=FALSE)
usa_spdf <- readOGR(dsn= "/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/us-state-boundaries.geojson")
acres_program_acres
acres_state
usa_spdf
#Convert string to numeric
acres_program_acres$Year <- as.numeric(acres_program_acres$Year)
#Melting Data
acres_program_acres_1 <- melt(acres_program_acres, id.vars="Year")
#Plot
acres_program_acres_graph <- acres_program_acres_1 %>%
ggplot(aes(x = Year, y = value, col=variable)) +
geom_line(aes(color = variable))+
geom_point(aes(color = variable))+
ggtitle("Acres Reciving Conservation by Program and Year")+xlab("Fiscal Year")+ylab("Acres")+
theme(axis.title=element_text(size=7), axis.text.x = element_text(size=5, angle = 90), plot.title=element_text(size=15, face = "bold"))+
scale_x_continuous(breaks=seq(2005,2022,1))+
scale_y_continuous(labels=scales::comma)
ggplotly(acres_program_acres_graph)
#Merge data
combined <- usa_spdf@data %>%
left_join(acres_state, by = c(name = "Stname"))
usa_spdf@data <- combined
usa_spdf@data$Acres <- as.numeric(usa_spdf@data$Acres)
usa_spdf@data$Practice_Count <- as.numeric(usa_spdf@data$Practice_Count)
# Extract latitude and longitude values
lat <- as.numeric(sub('.*?"lat":\\s*([^,}]+).*', '\\1', usa_spdf$geo_point_2d))
lon <- as.numeric(sub('.*?"lon":\\s*([^,}]+).*', '\\1', usa_spdf$geo_point_2d))
# Add latitude and longitude columns to usa_spdf@data
usa_spdf@data$lon <- lon
usa_spdf@data$lat <- lat
usa_spdf@data
#Create color palette
pal1 <- colorNumeric(
palette = "YlOrRd",
domain = usa_spdf@data$Acres)
pal2 <- colorNumeric(
palette = "YlOrRd",
domain = usa_spdf@data$Practice_Count)
#Create map
acres_state <- leaflet(usa_spdf) %>%
setView(lng = -98.5795, lat = 39.8283, zoom = 4) %>%
addTiles() %>%
addProviderTiles("Stamen.TonerLite") %>%
addPolygons(color = ~pal1(Acres),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = paste("State: ", usa_spdf@data$name, "<br>",
"Total Acres Receiving Conservation: ", usa_spdf@data$Acres, " acres"),
group = "Total Acres Receiving Conservation") %>%
addCircleMarkers(data = usa_spdf@data, lng = ~lon, lat = ~lat,
radius = ~Practice_Count/50000,
color = ~pal2(Practice_Count), stroke = FALSE, fillOpacity = 0.5,
popup = paste("State: ", usa_spdf@data$name, "<br>",
"Total Practice Count: ", usa_spdf@data$Practice_Count, " counts"),
group = "Total Practice Count") %>%
addLayersControl(
baseGroups = c("OpenStreetMap"),
overlayGroups = c("Total Acres Receiving Conservation", "Total Practice Count"),
options = layersControlOptions(collapsed = FALSE)) %>%
addLegend("topright", pal = pal1, values = ~Acres,
title = "Total Acres Receiving Conservation", opacity = 1)%>%
addLegend("bottomright", pal = pal2, values = ~Practice_Count,
title = "Total Practice Count", opacity = 1)
acres_state
#get data
easement_restoration <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/Restoration trend.csv", header=TRUE, stringsAsFactors=FALSE)
# Create a Shiny app
ui <- fluidPage(
# Select state(s)
selectInput(inputId = "state",
label = "Select state:",
choices = c("All", unique(easement_restoration$STATE)),
selected = "All"),
# Create plotly bar chart
plotlyOutput(outputId = "plot"))
server <- function(input, output) {
# Filter data based on the selected state
data_filtered <- reactive({
if (input$state == "All") {
easement_restoration %>%
group_by(RESTORATION_FY) %>%
summarise(count = sum(COUNT))}
else {easement_restoration %>%
filter(STATE == input$state) %>%
group_by(STATE, RESTORATION_FY) %>%
summarise(count = sum(COUNT))}})
# Render plotly bar chart
output$plot <- renderPlotly({
p <- plot_ly(data_filtered(), x = ~RESTORATION_FY, y = ~count, type = 'bar')
# Add title and axis labels
p <- layout(p, title = "Restoration Count by Year and State",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Count"))
# If a state is selected, add it to the title
if (input$state != "All") {
p <- layout(p, title = paste0("Restoration Count by Year - ", input$state))
}
p
})
}
shinyApp(ui, server)
#get data
easement_restoration <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/Restoration trend.csv", header=TRUE, stringsAsFactors=FALSE)
# Create a Shiny app
ui <- shinyUI(fluidPage(
# Select state(s)
selectInput(inputId = "state",
label = "Select state:",
choices = c("All", unique(easement_restoration$STATE)),
selected = "All"),
# Create plotly bar chart
plotlyOutput(outputId = "plot")))
server <- function(input, output) {
# Filter data based on the selected state
data_filtered <- reactive({
if (input$state == "All") {
easement_restoration %>%
group_by(RESTORATION_FY) %>%
summarise(count = sum(COUNT))}
else {easement_restoration %>%
filter(STATE == input$state) %>%
group_by(STATE, RESTORATION_FY) %>%
summarise(count = sum(COUNT))}})
# Render plotly bar chart
output$plot <- renderPlotly({
p <- plot_ly(data_filtered(), x = ~RESTORATION_FY, y = ~count, type = 'bar')
# Add title and axis labels
p <- layout(p, title = "Restoration Count by Year and State",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Count"))
# If a state is selected, add it to the title
if (input$state != "All") {
p <- layout(p, title = paste0("Restoration Count by Year - ", input$state))
}
p
})
}
shinyApp(ui, server)
#get data
easement_restoration <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/Restoration trend.csv", header=TRUE, stringsAsFactors=FALSE)
# Create a Shiny app
ui <- shinyUI(fluidPage(
# Select state(s)
selectInput(inputId = "state",
label = "Select state:",
choices = c("All", unique(easement_restoration$STATE)),
selected = "All"),
# Create plotly bar chart
mainPanel(plotlyOutput(outputId = "plot"))))
server <- function(input, output) {
# Filter data based on the selected state
data_filtered <- reactive({
if (input$state == "All") {
easement_restoration %>%
group_by(RESTORATION_FY) %>%
summarise(count = sum(COUNT))}
else {easement_restoration %>%
filter(STATE == input$state) %>%
group_by(STATE, RESTORATION_FY) %>%
summarise(count = sum(COUNT))}})
# Render plotly bar chart
output$plot <- renderPlotly({
p <- plot_ly(data_filtered(), x = ~RESTORATION_FY, y = ~count, type = 'bar')
# Add title and axis labels
p <- layout(p, title = "Restoration Count by Year and State",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Count"))
# If a state is selected, add it to the title
if (input$state != "All") {
p <- layout(p, title = paste0("Restoration Count by Year - ", input$state))
}
p
})
}
shinyApp(ui, server)
#get data
easement_restoration <- read.csv("/Users/annidai/Documents/GR5063/GroupC_Cruel_World_for_EndangeredPlants/conservation effort/Restoration trend.csv", header=TRUE, stringsAsFactors=FALSE)
# Create a Shiny app
ui <- fluidPage(
# Sidebar panel
sidebarPanel(
# Select state(s)
selectInput(inputId = "state",
label = "Select state:",
choices = c("All", unique(easement_restoration$STATE)),
selected = "All")
),
# Main panel
mainPanel(
# Create plotly bar chart
plotlyOutput(outputId = "plot")
)
)
server <- function(input, output) {
# Filter data based on the selected state
data_filtered <- reactive({
if (input$state == "All") {
easement_restoration %>%
group_by(RESTORATION_FY) %>%
summarise(count = sum(COUNT))}
else {easement_restoration %>%
filter(STATE == input$state) %>%
group_by(STATE, RESTORATION_FY) %>%
summarise(count = sum(COUNT))}})
# Render plotly bar chart
output$plot <- renderPlotly({
p <- plot_ly(data_filtered(), x = ~RESTORATION_FY, y = ~count, type = 'bar')
# Add title and axis labels
p <- layout(p, title = "Restoration Count by Year and State",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Count"))
# If a state is selected, add it to the title
if (input$state != "All") {
p <- layout(p, title = paste0("Restoration Count by Year - ", input$state))
}
p
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("evaluate")
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
